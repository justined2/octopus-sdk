import{d as o,m as i,u as s,_ as l,r as n,o as d,e as c}from"./index.js";import{C as y}from"./ClassicMultiselect-C-Xf0Kt3.js";const h=o({components:{ClassicMultiselect:y},props:{defaultanswer:{default:"",type:String},width:{default:"100%",type:String},multiple:{default:!1,type:Boolean},isDisabled:{default:!1,type:Boolean},initCategories:{default:void 0,type:Array},displayAllCategories:{default:!1,type:Boolean},categorySelected:{default:void 0,type:Number},categorySelectedArray:{default:void 0,type:Array},inModal:{default:!1,type:Boolean},noDeselect:{default:!0,type:Boolean}},emits:["update:categorySelected","update:categorySelectedArray","selected"],data(){return{maxElement:50,category:void 0,categoryForArray:[]}},computed:{...i(s,["storedCategories"]),categoriesChosen(){return this.initCategories?this.initCategories:this.storedCategories},categoriesOrdered(){let e=[...this.categoriesChosen].sort((t,r)=>t.name>r.name?1:-1);return this.displayAllCategories||(e=e.filter(t=>t.podcastCount)),this.getDefaultCategory&&e.unshift(this.getDefaultCategory),e},getDefaultCategory(){if(this.defaultanswer!=="")return{id:0,name:this.defaultanswer}},idClassicMultiselect(){return this.multiple?"categoryChooser"+this.multiple:"categoryChooser"},model:{get(){return this.multiple?this.categoryForArray:this.category},set(e){if(!this.multiple){this.category=e;return}this.categoryForArray=e}}},watch:{categorySelected:{immediate:!0,handler(){this.categorySelected?this.initCategorySelected():this.category=this.getDefaultCategory}}},mounted(){this.initCategoryArray()},methods:{async onSearchCategory(e){let t=this.categoriesOrdered;e&&(t=t.filter(r=>r.name.toUpperCase().includes(e.toUpperCase()))),this.$refs.selectCategory.afterSearch(t,t.length)},onCategorySelected(e){if(this.categorySelected!==void 0)this.$emit("update:categorySelected",e.id);else if(this.categorySelectedArray!==void 0){const t=[];e.forEach(r=>{t.push(r.id)}),this.$emit("update:categorySelectedArray",t)}else this.$emit("selected",e)},initCategorySelected(){this.category=this.categoriesChosen.find(e=>e.id===this.categorySelected)??this.getDefaultCategory},initCategoryArray(){!this.categoryForArray||!this.categorySelectedArray||(this.categoryForArray.length=0,this.categorySelectedArray.forEach(e=>{const t=this.categoriesChosen.find(r=>r.id===e);this.categoryForArray&&t&&this.categoryForArray.push(t)}))}}});function g(e,t,r,u,p,f){const a=n("ClassicMultiselect");return d(),c(a,{id:e.idClassicMultiselect,ref:"selectCategory","option-chosen":e.model,"option-label":"name",label:e.$t("By category"),placeholder:e.$t("Type string to filter by categories"),"max-element":e.maxElement,"in-modal":e.inModal,multiple:e.multiple,"min-search-length":1,width:e.width,"is-disabled":e.isDisabled,"no-deselect":e.noDeselect,onOnSearch:e.onSearchCategory,onSelected:e.onCategorySelected},null,8,["id","option-chosen","label","placeholder","max-element","in-modal","multiple","width","is-disabled","no-deselect","onOnSearch","onSelected"])}const S=l(h,[["render",g]]);export{S as default};
